# This file was generated by the Gradle 'init' task.
# https://docs.gradle.org/current/userguide/platforms.html#sub::toml-dependencies-format

[versions]
assertj = "3.27.3"
aws-dynamodblocal = "2.6.0"
awsSDK1 = "1.12.785"
awsSDK2 = "2.31.58"
bouncy = '1.81'
c3p0 = "0.11.1"
caffine = "3.2.0"
codehead-test = "3.0.4"
codehead-database-test = "3.0.4"
codehead-metrics = "3.0.4"
codehead-ff="3.0.4"
commons-codec = "1.18.0"
commons-io = "2.19.0"
conscrypt = '2.5.2'
dagger = "2.56.2"
dropwizard4 = "4.0.14"
hsqldb = '2.7.4'
httpclient = '4.5.14'
immutables = '2.10.1'
jackson = '2.19.0'
jdbi = '3.49.4'
jetcd = "0.8.5"
junit-jupiter = "5.13.0"
junit-platform = '1.13.0'
liquibase = '4.32.0'
local-queue = '3.0.4'
logback-access = '2.0.3'
log4j = '2.24.3'
micrometer = '1.15.0'
metrics = '4.2.32'
mokito = '5.18.0'
okhttp = '4.12.0'
openfeign = '13.6'
pgjdbc = '42.7.6'
resilience4j = '2.2.0'
retrofit = '3.0.0'
testcontainers = '1.21.1'

[libraries]
assertj = { module = "org.assertj:assertj-core", version.ref = "assertj" }
aws-dynamodblocal = { module = "com.amazonaws:DynamoDBLocal", version.ref = "aws-dynamodblocal" }
aws-sdk2-ddb = { module = "software.amazon.awssdk:dynamodb", version.ref = "awsSDK2" }
aws-sdk2-bom = { module = "software.amazon.awssdk:bom", version.ref = "awsSDK2" }
aws-sdk-ddb = { module = "com.amazonaws:aws-java-sdk-dynamodb", version.ref = "awsSDK1" }
bcpkix =  { module = "org.bouncycastle:bcpkix-jdk18on", version.ref ="bouncy" }
bcprov =  { module = "org.bouncycastle:bcprov-jdk18on", version.ref ="bouncy" }
c3p0 =  { module = "com.mchange:c3p0", version.ref ="c3p0" }
caffeine = { module = "com.github.ben-manes.caffeine:caffeine", version.ref = "caffine" }
caffeine-jcache = { module = "com.github.ben-manes.caffeine:jcache", version.ref = "caffine" }
codehead-ff = { module = "com.codeheadsystems:feature-flag", version.ref = "codehead-ff" }
codehead-ff-etcd = { module = "com.codeheadsystems:feature-flag-etcd", version.ref = "codehead-ff" }
codehead-ff-metrics = { module = "com.codeheadsystems:feature-flag-metrics", version.ref = "codehead-ff" }
codehead-test = { module = "com.codeheadsystems:codehead-test", version.ref = "codehead-test" }
database-test = { module = "com.codeheadsystems:database-test", version.ref = "codehead-database-test" }
codehead-metrics = { module = "com.codeheadsystems:metrics", version.ref = "codehead-metrics" }
codehead-metrics-micrometer = { module = "com.codeheadsystems:metrics-micrometer", version.ref = "codehead-metrics" }
codehead-metrics-test = { module = "com.codeheadsystems:metrics-test", version.ref = "codehead-metrics" }
commons-codec = { module = "commons-codec:commons-codec", version.ref = "commons-codec" }
commons-io = { module = "commons-io:commons-io", version.ref = "commons-io" }
conscrypt-openjdk-uber = { module = "org.conscrypt:conscrypt-openjdk-uber", version.ref = "conscrypt" }
dagger = { module = "com.google.dagger:dagger", version.ref = "dagger" }
dagger-compiler = { module = "com.google.dagger:dagger-compiler", version.ref = "dagger" }
dropwizard4-bom= { module = "io.dropwizard:dropwizard-bom", version.ref = "dropwizard4" }
dropwizard4-auth= { module = "io.dropwizard:dropwizard-auth", version.ref = "dropwizard4" }
dropwizard4-core= { module = "io.dropwizard:dropwizard-core", version.ref = "dropwizard4" }
dropwizard4-dependencies= { module = "io.dropwizard:dropwizard-dependencies", version.ref = "dropwizard4" }
dropwizard4-jackson= { module = "io.dropwizard:dropwizard-jackson", version.ref = "dropwizard4" }
dropwizard4-jdbi= { module = "io.dropwizard:dropwizard-jdbi3", version.ref = "dropwizard4" }
dropwizard4-metrics-graphite= { module = "io.dropwizard:dropwizard-metrics-graphite", version.ref = "dropwizard4" }
dropwizard4-testing= { module = "io.dropwizard:dropwizard-testing", version.ref = "dropwizard4" }
dropwizard4-http2= { module = "io.dropwizard:dropwizard-http2", version.ref = "dropwizard4" }
hsqldb = { module = "org.hsqldb:hsqldb", version.ref = "hsqldb" }
httpclient = { module = "org.apache.httpcomponents:httpclient", version.ref = "httpclient" }
immutables-value = { module = "org.immutables:value", version.ref = "immutables" }
immutables-annotations = { module = "org.immutables:value-annotations", version.ref = "immutables" }
jackson-core = { module = "com.fasterxml.jackson.core:jackson-core", version.ref = "jackson" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations", version.ref = "jackson" }
jackson-datatype-jdk8 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jdk8", version.ref = "jackson" }
jackson-dataformat-yaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "jackson" }
javax-inject = { module = "javax.inject:javax.inject", version = "1" }
jdbi-core = {module = "org.jdbi:jdbi3-core", version.ref = "jdbi" }
jdbi-caffeine = {module = "org.jdbi:jdbi3-caffeine-cache", version.ref = "jdbi" }
jdbi-noopcache = {module = "org.jdbi:jdbi3-noop-cache", version.ref = "jdbi" }
jdbi-testing = {module = "org.jdbi:jdbi3-testing", version.ref = "jdbi" }
jdbi-testcontainers = {module = "org.jdbi:jdbi3-testcontainers", version.ref = "jdbi" }
jdbi-jackson2 = {module = "org.jdbi:jdbi3-jackson2", version.ref = "jdbi" }
jdbi-postgres = {module = "org.jdbi:jdbi3-postgres", version.ref = "jdbi" }
jdbi-sqlobject = {module = "org.jdbi:jdbi3-sqlobject", version.ref = "jdbi" }
jdbi-bom = {module = "org.jdbi:jdbi3-bom", version.ref = "jdbi" }
jetcd-core = { module = "io.etcd:jetcd-core", version.ref = "jetcd" }
jetcd-test = { module = "io.etcd:jetcd-test", version.ref = "jetcd" }
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit-jupiter" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit-jupiter" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit-jupiter" }
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit-jupiter" }
junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher", version.ref = "junit-platform" }
junit-platform-suite-api = { module = "org.junit.platform:junit-platform-suite-api", version.ref = "junit-platform" }
junit-platform-suite-engine = { module = "org.junit.platform:junit-platform-suite-engine", version.ref = "junit-platform" }
liquibase-core = { module = "org.liquibase:liquibase-core", version.ref = "liquibase" }
local-queue = { module = "com.codeheadsystems:local-queue", version.ref = "local-queue" }
log4j-api = { module = "org.apache.logging.log4j:log4j-api", version.ref = "log4j" }
log4j-core = { module = "org.apache.logging.log4j:log4j-core", version.ref = "log4j" }
metrics-core = { module = "io.dropwizard.metrics:metrics-core", version.ref = "metrics" }
metrics-jdbi = { module = "io.dropwizard.metrics:metrics-jdbi3", version.ref = "metrics" }
metrics-jersey2 = { module = "io.dropwizard.metrics:metrics-jersey3", version.ref = "metrics" }
metrics-caffeine = { module = "io.dropwizard.metrics:metrics-caffeine", version.ref = "metrics" }
micrometer-core = { module = "io.micrometer:micrometer-core", version.ref = "micrometer" }
mockito-core = { module = "org.mockito:mockito-core", version.ref = "mokito" }
mockito-junit-jupiter = { module = "org.mockito:mockito-junit-jupiter", version.ref = "mokito" }
okhttp-bom = { module = "com.squareup.okhttp3:okhttp-bom", version.ref = "okhttp" }
openfeign-core = { module = "io.github.openfeign:feign-core", version.ref = "openfeign" }
openfeign-jackson = { module = "io.github.openfeign:feign-jackson", version.ref = "openfeign" }
openfeign-java11 = { module = "io.github.openfeign:feign-java11", version.ref = "openfeign" }
openfeign-jaxrs2 = { module = "io.github.openfeign:feign-jaxrs2", version.ref = "openfeign" }
openfeign-jaxrs3 = { module = "io.github.openfeign:feign-jaxrs3", version.ref = "openfeign" }
openfeign-jakarta = { module = "io.github.openfeign:feign-jakarta", version.ref = "openfeign" }
openfeign-okhttp = { module = "io.github.openfeign:feign-okhttp", version.ref = "openfeign" }
openfeign-micrometer = { module = "io.github.openfeign:feign-micrometer", version.ref = "openfeign" }
openfeign-slf4j = { module = "io.github.openfeign:feign-slf4j", version.ref = "openfeign" }
pgjdbc = { module = "org.postgresql:postgresql", version.ref = "pgjdbc" }
retrofit2-converter-jackson = { module = "com.squareup.retrofit2:converter-jackson", version.ref = "retrofit" }
retrofit2-converter-java8 = { module = "com.squareup.retrofit2:converter-java8", version.ref = "retrofit" }
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofit-mock = { module = "com.squareup.retrofit2:retrofit-mock", version.ref = "retrofit" }
resilience4j-micrometer = { module = "io.github.resilience4j:resilience4j-micrometer", version.ref = "resilience4j" }
resilience4j-retry = { module = "io.github.resilience4j:resilience4j-retry", version.ref = "resilience4j" }
resilience4j-feign = { module = "io.github.resilience4j:resilience4j-feign", version.ref = "resilience4j" }
resilience4j-retrofit = { module = "io.github.resilience4j:resilience4j-retrofit", version.ref = "resilience4j" }
resilience4j-ratelimiter = { module = "io.github.resilience4j:resilience4j-ratelimiter", version.ref = "resilience4j" }
resilience4j-circuitbreaker = { module = "io.github.resilience4j:resilience4j-circuitbreaker", version.ref = "resilience4j" }
testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }

[bundles]
jackson = ["jackson-core", "jackson-databind", "jackson-annotations", "jackson-datatype-jdk8"]
log4j = ["log4j-api", "log4j-core"]
testing = ["mockito-core", "mockito-junit-jupiter", "assertj", "junit-jupiter", "junit-jupiter-api", "junit-jupiter-engine", "junit-jupiter-params", "codehead-test"]
